There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104



class Solution {
    public int search(int[] nums, int target) {
           int n = nums.length ;
           int i=0 ;
             while (i<n-1 && nums[i] < nums[i+1]) {
                 i++ ;
             } 
             int pivot = i ;
             if (nums[n-1]== target) {
                return n-1 ;
             }
             if (nums[pivot]==target){
                 return pivot ;
             }
             if (i==n-1) {
                 return BinarySearch(nums,0,n-1,target) ;
             }
              if (nums[0] <= target && target < nums[pivot]) {
                   return BinarySearch(nums, 0, pivot - 1, target);
                 } else {
                  return BinarySearch(nums, pivot + 1, n - 1, target);
            }   
    }

     public int BinarySearch(int[] nums , int low ,int hi , int target )   {
     
          while(low<=hi) {
              int mid = ( low + hi ) / 2 ;
              if (nums[mid]==target) {
                return mid ;
              } else if (nums[mid] < target ) {
                  low = mid + 1 ;
              } else if (nums[mid] > target) {
                  hi = mid-1 ;
                }
          }
          return -1 ;
    }
}