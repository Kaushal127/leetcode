Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {    

        int N = nums1.length ;
        int M = nums2.length ;
        int[] ans = new int[N+M] ;
        int i=0 , j=0 ,k=0 ;
           while (i<N && j<M ){
               if (nums1[i]<nums2[j]){
                   ans[k] = nums1[i] ;
                   i++ ;
                   k++ ;
               } else {
                   ans[k] = nums2[j] ;
                   j++ ;
                   k++ ;
               }
           }
           while (i<N){
               ans[k] = nums1[i] ;
               i++;
               k++;
           }
           while(j<M) {
               ans[k] = nums2[j] ;
               j++ ;
               k++ ;
           }
       double ansMedain = 0.0 ;
       int mid = ans.length / 2  ;
       if (ans.length % 2==1){
           ansMedain = ans[mid] ;
       } else {
           ansMedain = (ans[mid] + ans[mid-1]) / 2.0 ;
       }
       return ansMedain ;
    }
 }