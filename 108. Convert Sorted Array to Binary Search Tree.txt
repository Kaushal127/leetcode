Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced
 binary search tree.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        int n = nums.length ;
        TreeNode ans = helper(nums , 0 , n-1 ) ;
        return ans ; 
    }
    public TreeNode helper(int[] nums ,int l , int r) {
        //base case 
        if(l>r){
            return null ;
        }
        // create root node as mid element of array
        int mid = (l+r) / 2 ;
        TreeNode root = new TreeNode(nums[mid]) ;
        //simply assign left subtree and right subtree
        root.left = helper(nums,l,mid-1) ;
        root.right = helper(nums,mid+1,r) ;
        return root ;
    }
}