Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.

 

Example 1:

Input: s = "annabelle", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.
Some possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b"
Example 2:

Input: s = "leetcode", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.
Example 3:

Input: s = "true", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= 105


class Solution {
    public boolean canConstruct(String s, int k) {
        int n = s.length();
        if(n<k){
            return false;
        }
    
        HashMap<Character,Integer> map = new HashMap<>();
    
        for(int i=0;i<n;i++) {
          char c = s.charAt(i);
           if (map.containsKey(c)==true){
                  int temp = map.get(c) ;
                  temp++ ;
                  map.put(c , temp) ;
              } else {
                  map.put(c , 1) ;
              }
        }
    
        int ans = 0; 
       
        for(Map.Entry<Character,Integer> e:map.entrySet()) {
            int v = e.getValue();
             if(v%2!=0){
                ans++;
            }
        }   
            return ans<=k;
    }
}