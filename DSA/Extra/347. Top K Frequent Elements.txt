Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int N = nums.length ;
        HashMap<Integer , Integer> map = new HashMap<>() ;
          for (int i=0 ; i<N ; i++){
              if (map.containsKey(nums[i])==true){
                  int temp = map.get(nums[i]) ;
                  temp++ ;
                  map.put(nums[i] , temp) ;
              } else {
                  map.put(nums[i] , 1) ;
              }
          }
     
         PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> map.get(a) - map.get(b));

        for(int num : map.keySet()){
            minHeap.add(num);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        int[] arr = new int[k];
        int i = 0;
        while(!minHeap.isEmpty()){
            arr[i] = minHeap.poll();
            i++;
        }
        return arr;
    }
}