Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode A) {
          if (A.next == null) {
            return true;
       }
      
        ListNode slow = A;
        ListNode fast = A;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode B = null;
        B = slow.next;
        slow.next = null;
     
        ListNode rev = null;
        while (B != null) {
            ListNode t = B;
            B = B.next;
            t.next = null;
            t.next = rev;
            rev = t;
        }

        while (A != null && rev != null) {
            if (A.val != rev.val) {
                return false;
            }
            A = A.next;
            rev = rev.next;
        }
        return true;
    }
}