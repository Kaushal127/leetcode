Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105



class Solution {
    public int trap(int[] height) {
        int[] pfmax = prefixmax(height) ;
        int[] sfmax = sufixmax(height) ;
        int ans = 0 ;
         for (int i=1 ; i<height.length-1 ; i++){
             int lb = pfmax[i-1] ;
             int rb = sfmax[i+1] ;
             int amt = Math.min (lb , rb) - height[i] ;
             if (amt>0) {
                 ans += amt ;
             }
         }
         return ans ;
    }
    public int[] prefixmax(int[]arr){
        int n = arr.length ;
        int[] pfmax = new int[n] ;
        pfmax[0] = arr[0] ;
          for (int i=1 ; i<n ; i++){
              pfmax[i] = Math.max(pfmax[i-1] ,arr[i]) ;
          }
          return pfmax ;
    }
    public int[] sufixmax(int[]arr){
        int n = arr.length ;
        int[] sfmax = new int[n] ;
        sfmax[n-1] = arr[n-1] ;
          for (int i=n-2 ; i>=0 ; i--){
              sfmax[i] = Math.max(sfmax[i+1] ,arr[i]) ;
          }
          return sfmax ;
    }
}