Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.

Return any possible rearrangement of s or return "" if not possible.

 

Example 1:

Input: s = "aab"
Output: "aba"
Example 2:

Input: s = "aaab"
Output: ""
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.



class Solution {
    public class Pair{
        char ch ;
        int freq ;
          Pair(char ch , int freq ){
              this.ch = ch ;
              this.freq = freq ;
          }
    }
    public String reorganizeString(String s) {
        HashMap<Character , Integer> map = new HashMap<>() ;
          for (int i=0 ; i<s.length() ; i++){
              char ch = s.charAt(i) ;
              if (map.containsKey(ch)){
                  int temp = map.get(ch) ;
                  map.put(ch , temp + 1 ) ;
              } else {
                  map.put(ch,1) ;
              }
          }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> b.freq - a.freq);
          for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            char character = entry.getKey();
            int frequency = entry.getValue();
            pq.add(new Pair(character, frequency));
        }
        Pair prev = new Pair ('#' , -1) ;
        StringBuilder sb = new StringBuilder() ;
        while (!pq.isEmpty()){
            Pair curr = pq.remove() ;
            sb.append(curr.ch) ;
            curr.freq-- ;
              if (prev.freq > 0){
                  pq.add(prev) ;
              }
              prev = curr ;
        }
        if (sb.length()!=s.length()) {
            return "" ;
        } else {
            return sb.toString() ;
        }
    }
}