Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.



class Solution {
    int[][] dp ;
    public int longestCommonSubsequence(String text1, String text2) {
        int i = text1.length() ;
        int j = text2.length() ;
        dp = new int[i][j] ;
          for (int k=0 ; k<i ;k++){
              for (int m=0 ; m<j ; m++){
                  dp[k][m] = -1 ;
              }
          }
        int ans = helper (text1 ,text2 , i-1 ,j-1);
        return ans ;
    }
    public int helper(String s1 , String s2 , int i , int j) {
        if (i<0 || j<0){
            return 0 ;
        }
        if (dp[i][j]!=-1){
            return dp[i][j] ;
        }
        int ans = 0 ;
        if (s1.charAt(i)==s2.charAt(j)){
            ans = helper(s1,s2, i-1 , j-1) + 1 ;
        } else {
            ans = Math.max(helper(s1,s2,i-1,j) , helper(s1,s2,i,j-1)) ;
        }
        dp[i][j] = ans ;
        return ans ;
    }
}