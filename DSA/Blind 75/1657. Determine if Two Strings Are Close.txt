Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

 

Example 1:

Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"
Example 2:

Input: word1 = "a", word2 = "aa"
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.
Example 3:

Input: word1 = "cabbba", word2 = "abbccc"
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: "cabbba" -> "caabbb"
Apply Operation 2: "caabbb" -> "baaccc"
Apply Operation 2: "baaccc" -> "abbccc"
 

Constraints:

1 <= word1.length, word2.length <= 105
word1 and word2 contain only lowercase English letters.

class Solution {
    public boolean closeStrings(String word1, String word2) {
          // if the length are not equal simply return false
        if(word1.length()!=word2.length()){
            return false;
        }
        return check(word1, word2);
    }
    public boolean check(String s1, String s2){
        // creating a frequency array to keep track of the character count 
        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        
        // iterating over the length of strings
        for(int i=0;i<s1.length();i++) freq1[s1.charAt(i)-'a']++;
        for(int i=0;i<s2.length();i++) freq2[s2.charAt(i)-'a']++;
        
        // The same character with the same count is present in both arrays if they are equal.
        if(Arrays.equals(freq2, freq1)){
            return true;
        }
        
        // determining whether the two strings contain entirely unique characters
        for(int i=0;i<26;i++){
            if((freq1[i]==0 && freq2[i]!=0) || (freq2[i]==0 && freq1[i]!=0)){
                return false;
            }
        }
        // sorting the arrays
        Arrays.sort(freq1);
        Arrays.sort(freq2);
        
        // If arrays are equal, it means that we have the same number of characters, so we will return true.
        if(Arrays.equals(freq2, freq1)) return true;
        
        // both the strings are not close
        return false;
    }
}