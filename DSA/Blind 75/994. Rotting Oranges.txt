You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.


class Solution {
    class Pair {
        int i ;
        int j ;
        int time ;
          Pair (int i , int j , int time){
              this.i = i ;
              this.j = j ;
              this.time = time ;
          }
    }
    public int orangesRotting(int[][] grid) {
        int N = grid.length ;
        int M = grid[0].length ;
        Queue<Pair> q = new ArrayDeque<>() ;
          for (int i=0 ; i<N ; i++){
              for (int j=0 ; j<M ; j++){
                  if (grid[i][j]==2){
                      q.add(new Pair(i,j,0)) ;
                  }
              }
          }

          int ans = 0 ;
          while (q.size()>0){
              Pair rmv = q.remove() ;
              int i= rmv.i ;
              int j = rmv.j ;
              int time = rmv.time ;
              ans = time ;
              if (i-1>=0 && grid[i-1][j]==1){
                  grid[i-1][j] = 2 ;
                  q.add(new Pair(i-1 , j ,time+1)) ;
              }
               if (j-1>=0 && grid[i][j-1]==1){
                  grid[i][j-1] = 2 ;
                  q.add(new Pair(i , j-1 ,time+1)) ;
              }
               if (i+1<N && grid[i+1][j]==1){
                  grid[i+1][j] = 2 ;
                  q.add(new Pair(i+1 , j ,time+1)) ;
              }
               if (j+1<M && grid[i][j+1]==1){
                  grid[i][j+1] = 2 ;
                  q.add(new Pair(i , j+1 ,time+1)) ;
              }
          }
          for (int i=0 ; i<N ;i++){
              for (int j=0 ; j<M ; j++){
                  if (grid[i][j]==1){
                      return -1 ;
                  }
              }
          }
        return ans ;  
    }
}