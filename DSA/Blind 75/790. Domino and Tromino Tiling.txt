You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.


Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

 

Example 1:


Input: n = 3
Output: 5
Explanation: The five different ways are show above.
Example 2:

Input: n = 1
Output: 1
 


class Solution {
    long[] dp ;
    int m = (int)Math.pow(10 , 9) + 7 ;
    public int numTilings(int n) {
        dp = new long[n+1] ;
        Arrays.fill(dp , -1) ;
        int ans = (int) solve(n) % m ;
        return ans ;
    }
    public long solve(int n){
        if (n==0){
            return 1 ;
        }
        if (n<3){
            return n ;
        }
        if (dp[n]!=-1){
            return dp[n] ;
        }
        long a = 2*solve(n-1)%m ;
        long b = solve(n-3)%m ;
        dp[n] = a+b ;
        return dp[n] ;
    }
}